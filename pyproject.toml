[tool.poetry]
name = "pysongbook"
version = "0.1.0"
description = "A toolbox to typeset chorded songbooks."
authors = ["Jan Å imbera <simbera.jan@gmail.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"

[tool.poetry.group.dev.dependencies]
# Linter and formatter
ruff = ">=0.1.3"
pydocstyle = "*"
# Typing
mypy = "^1.0"
# Security
bandit = { version = "^1.7", extras = ["toml"] }
pip-audit = "^2.4"
# Testing
pytest = "^7.1"
pytest-cov = "^4.0"
coverage = { version = "^7.0", extras = ["toml"] }
# Documentation
sphinx = "^5.0"
sphinx_rtd_theme = "^1.1"
myst-parser = ">=0.18.0, <0.19"
# Versioning
bumpver = ">=2022.1120"
# Scripting
poethepoet = "^0.18.1"
# Project specific dev dependencies
pytest-mock = "^3.11.1"

# https://mypy.readthedocs.io/en/latest/config_file.html#using-a-pyproject-toml-file
[tool.mypy]
python_version = "3.10"
follow_imports = "silent"
warn_return_any = true
warn_unused_ignores = true
warn_redundant_casts = true
check_untyped_defs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
no_implicit_reexport = true
ignore_missing_imports = true
show_error_codes = true
cache_dir = ".cache/mypy/"

# Don't fuss about missing annotations in tests
# error: Function is missing a return type annotation
[[tool.mypy.overrides]]
module = "test.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

# https://docs.pytest.org/en/latest/reference/customize.html#pyproject-toml
[tool.pytest.ini_options]
minversion = "7.1"
testpaths = [
  "test/",
]
addopts = [
  "-ra",
  "--capture=no",
  "--strict-markers",
  "--cov-report=term-missing:skip-covered",
  "--no-cov-on-fail",
]
markers = [
  "slow: Slow tests",
]
cache_dir = ".cache/pytest/"

# https://coverage.readthedocs.io/en/latest/config.html
[tool.coverage.run]
branch = true
data_file = ".cache/coverage"
omit = [
  ".venv/*",
  "tests/*",
  "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "@overload",
  "raise NotImplementedError",
  "except DistributionNotFound",
  "TYPE_CHECKING",
]

[tool.ruff]
lint.select = [
  "A", # flake8-builtins
  "ARG", # flake8-unused-arguments
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "C90", # mccabe
  "E", # pycodestyle
  "F", # Pyflakes
  "N", # pep8-naming
  "NPY", # NumPy
  "PD", # pandas-vet
  "PIE", # flake8-pie
  "PLE", # Pylint Error
  "PTH", # flake8-use-pathlib
  "RUF", # Ruff
  "S", # flake8-bandit
  "SIM", # flakes8-simplify
  "T20", # flake8-print
  "UP", # pyupgrade
  "I001", # isort
]
cache-dir = ".cache/ruff"
line-length = 120
target-version = "py310"
output-format = "grouped"
lint.ignore-init-module-imports = true
[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true
[tool.ruff.lint.isort]
force-sort-within-sections = true
lines-after-imports = 2

[tool.poe.tasks]

[tool.poe.tasks.clean]
help = "Remove generated files"
cmd = """
    rm -rf .coverage
           .mypy_cache
           .pytest_cache
           ./**/__pycache__
           dist
           htmlcov
  """

[tool.poe.tasks.format]
help = "Run formating tools on the code base"
sequence = ["ruff --select I001 --fix-only .", "ruff format ."]
default_item_type = "cmd"

[tool.poe.tasks.test]
help = "Run tests"
cmd = "pytest --cov=pysongbook"

[tool.poe.tasks.type]
help = "Run the mypy type checker"
cmd = "mypy pysongbook"

[tool.poe.tasks.lint]
help = "Run linter"
cmd = "ruff pysongbook"

[tool.poe.tasks.style]
help = "Validate code style"
sequence = ["ruff --select I001 --quiet .", "ruff format --check --quiet ."]
default_item_type = "cmd"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
